{"ast":null,"code":"import { ref, watchEffect } from 'vue';\nimport { projectFirestore } from '../firebase/config';\n\nconst getCollection = collection => {\n  const documents = ref(null);\n  const error = ref(null); // register the firestore collection reference\n\n  let collectionRef = projectFirestore.collection(collection).orderBy('createdAt');\n  const unsub = collectionRef.onSnapshot(snap => {\n    let results = [];\n    snap.docs.forEach(doc => {\n      // must wait for the server to create the timestamp & send it back\n      doc.data().createdAt && results.push({ ...doc.data(),\n        id: doc.id\n      });\n    }); // update values\n\n    documents.value = results;\n    error.value = null;\n  }, err => {\n    console.log(err.message);\n    documents.value = null;\n    error.value = 'could not fetch the data';\n  });\n  watchEffect(onInvalidate => {\n    onInvalidate(() => unsub());\n  });\n  return {\n    error,\n    documents\n  };\n};\n\nexport default getCollection;","map":{"version":3,"sources":["/home/saumya/Documents/Project.Tech/project-tech/src/composables/getCollection.js"],"names":["ref","watchEffect","projectFirestore","getCollection","collection","documents","error","collectionRef","orderBy","unsub","onSnapshot","snap","results","docs","forEach","doc","data","createdAt","push","id","value","err","console","log","message","onInvalidate"],"mappings":"AAAA,SAASA,GAAT,EAAcC,WAAd,QAAiC,KAAjC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,aAAa,GAAIC,UAAD,IAAgB;AAEpC,QAAMC,SAAS,GAAGL,GAAG,CAAC,IAAD,CAArB;AACA,QAAMM,KAAK,GAAGN,GAAG,CAAC,IAAD,CAAjB,CAHoC,CAKpC;;AACA,MAAIO,aAAa,GAAGL,gBAAgB,CAACE,UAAjB,CAA4BA,UAA5B,EACjBI,OADiB,CACT,WADS,CAApB;AAGA,QAAMC,KAAK,GAAGF,aAAa,CAACG,UAAd,CAAyBC,IAAI,IAAI;AAC7C,QAAIC,OAAO,GAAG,EAAd;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkBC,GAAG,IAAI;AACvB;AACAA,MAAAA,GAAG,CAACC,IAAJ,GAAWC,SAAX,IAAwBL,OAAO,CAACM,IAAR,CAAa,EAAC,GAAGH,GAAG,CAACC,IAAJ,EAAJ;AAAgBG,QAAAA,EAAE,EAAEJ,GAAG,CAACI;AAAxB,OAAb,CAAxB;AACD,KAHD,EAF6C,CAO7C;;AACAd,IAAAA,SAAS,CAACe,KAAV,GAAkBR,OAAlB;AACAN,IAAAA,KAAK,CAACc,KAAN,GAAc,IAAd;AACD,GAVa,EAUXC,GAAG,IAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACAnB,IAAAA,SAAS,CAACe,KAAV,GAAkB,IAAlB;AACAd,IAAAA,KAAK,CAACc,KAAN,GAAc,0BAAd;AACD,GAda,CAAd;AAgBAnB,EAAAA,WAAW,CAAEwB,YAAD,IAAkB;AAC5BA,IAAAA,YAAY,CAAC,MAAMhB,KAAK,EAAZ,CAAZ;AACD,GAFU,CAAX;AAIA,SAAO;AAAEH,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAP;AACD,CA9BD;;AAgCA,eAAeF,aAAf","sourcesContent":["import { ref, watchEffect } from 'vue'\nimport { projectFirestore } from '../firebase/config'\n\nconst getCollection = (collection) => {\n\n  const documents = ref(null)\n  const error = ref(null)\n\n  // register the firestore collection reference\n  let collectionRef = projectFirestore.collection(collection)\n    .orderBy('createdAt')\n\n  const unsub = collectionRef.onSnapshot(snap => {\n    let results = []\n    snap.docs.forEach(doc => {\n      // must wait for the server to create the timestamp & send it back\n      doc.data().createdAt && results.push({...doc.data(), id: doc.id})\n    });\n    \n    // update values\n    documents.value = results\n    error.value = null\n  }, err => {\n    console.log(err.message)\n    documents.value = null\n    error.value = 'could not fetch the data'\n  })\n\n  watchEffect((onInvalidate) => {\n    onInvalidate(() => unsub());\n  });\n\n  return { error, documents }\n}\n\nexport default getCollection"]},"metadata":{},"sourceType":"module"}