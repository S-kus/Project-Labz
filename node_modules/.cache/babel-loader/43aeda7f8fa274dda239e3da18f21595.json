{"ast":null,"code":"import _toConsumableArray from \"/home/saumya/Documents/Project.Tech/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/home/saumya/Documents/Project.Tech/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { ref } from 'vue';\nimport useDocument from '../composables/useDocument';\nexport default {\n  props: ['projectlist'],\n  setup: function setup(props) {\n    var title = ref('');\n    var codelink = ref('');\n    var showForm = ref(false);\n\n    var _useDocument = useDocument('projectlists', props.projectlist.id),\n        updateDoc = _useDocument.updateDoc;\n\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var newProject, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                newProject = {\n                  title: title.value,\n                  codelink: codelink.value,\n                  id: Math.floor(Math.random() * 1000000)\n                };\n                _context.next = 3;\n                return updateDoc({\n                  projects: [].concat(_toConsumableArray(props.projectlist.projects), [newProject])\n                });\n\n              case 3:\n                res = _context.sent;\n                title.value = '';\n                codelink.value = '';\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function handleSubmit() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      title: title,\n      codelink: codelink,\n      showForm: showForm,\n      handleSubmit: handleSubmit\n    };\n  }\n};","map":{"version":3,"mappings":";;;;AAaA,SAASA,GAAT,QAAoB,KAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,eAAe;AACXC,OAAK,EAAE,CAAC,aAAD,CADI;AAEXC,OAFW,iBAELD,KAFK,EAEE;AACb,QAAME,KAAI,GAAIJ,GAAG,CAAC,EAAD,CAAjB;AACA,QAAMK,QAAO,GAAIL,GAAG,CAAC,EAAD,CAApB;AACA,QAAMM,QAAO,GAAIN,GAAG,CAAC,KAAD,CAApB;;AACA,uBAAsBC,WAAW,CAAC,cAAD,EAAiBC,KAAK,CAACK,WAAN,CAAkBC,EAAnC,CAAjC;AAAA,QAAQC,SAAR,gBAAQA,SAAR;;AAEA,QAAMC,YAAW;AAAA,yEAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,0BADa,GACA;AACjBP,uBAAK,EAAEA,KAAK,CAACQ,KADI;AAEjBP,0BAAQ,EAAEA,QAAQ,CAACO,KAFF;AAGjBJ,oBAAE,EAAEK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B;AAHa,iBADA;AAAA;AAAA,uBAMDN,SAAS,CAAC;AAC1BO,0BAAQ,+BAAMd,KAAK,CAACK,WAAN,CAAkBS,QAAxB,IAAkCL,UAAlC;AADkB,iBAAD,CANR;;AAAA;AAMbM,mBANa;AASnBb,qBAAK,CAACQ,KAAN,GAAc,EAAd;AACAP,wBAAQ,CAACO,KAAT,GAAiB,EAAjB;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA,sBAAXF,YAAW;AAAA;AAAA;AAAA,OAAjB;;AAaA,WAAO;AAAEN,WAAK,EAALA,KAAF;AAASC,cAAQ,EAARA,QAAT;AAAmBC,cAAQ,EAARA,QAAnB;AAA6BI,kBAAW,EAAXA;AAA7B,KAAP;AACF;AAtBa,CAAf","names":["ref","useDocument","props","setup","title","codelink","showForm","projectlist","id","updateDoc","handleSubmit","newProject","value","Math","floor","random","projects","res"],"sourceRoot":"","sources":["/home/saumya/Documents/Project.Tech/src/components/AddProject.vue"],"sourcesContent":["<template>\n  <div class=\"add-song\">\n    <button v-if=\"!showForm\" @click=\"showForm = true\">Add Projects</button>\n    <form v-if=\"showForm\" @submit.prevent=\"handleSubmit\">\n      <h4>Add a New Project</h4>\n      <input type=\"text\" placeholder=\"Project title\" required v-model=\"title\">\n      <input type=\"text\" placeholder=\"Project codebase Link\" required v-model=\"codelink\">\n      <button>Add</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport useDocument from '../composables/useDocument'\n\nexport default {\n    props: ['projectlist'],\n    setup(props) {\n    const title = ref('')\n    const codelink = ref('')\n    const showForm = ref(false)\n    const { updateDoc } = useDocument('projectlists', props.projectlist.id)\n\n    const handleSubmit = async () => {\n      const newProject = {\n        title: title.value,\n        codelink: codelink.value,\n        id: Math.floor(Math.random() * 1000000)\n      }\n      const res = await updateDoc({\n        projects: [...props.projectlist.projects, newProject]\n      })\n      title.value = ''\n      codelink.value = ''\n    }\n\n    return { title, codelink, showForm, handleSubmit }\n  }\n}\n</script>\n\n<style scoped>\n  .add-song {\n    text-align: center;\n    margin-top: 40px;\n  }\n  form {\n    max-width: 100%;\n    text-align: left;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}