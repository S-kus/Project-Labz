{"ast":null,"code":"import { ref } from 'vue';\nimport useStorage from '@/composables/useStorage';\nimport useCollection from '@/composables/useCollection';\nimport getUser from '@/composables/getUser';\nimport { timestamp } from '@/firebase/config';\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    // const { filePath, url, uploadImage } = useStorage()\n    const {\n      error,\n      addDoc\n    } = useCollection('playlists');\n    const {\n      user\n    } = getUser();\n    const router = useRouter();\n    const title = ref('');\n    const description = ref('');\n    const file = ref(null);\n    const fileError = ref(null);\n    const isPending = ref(false);\n\n    const handleSubmit = async () => {\n      if (file.value) {\n        isPending.value = true;\n        await uploadImage(file.value);\n        const res = await addDoc({\n          title: title.value,\n          description: description.value,\n          userId: user.value.uid,\n          userName: user.value.displayName,\n          coverUrl: url.value,\n          filePath: filePath.value,\n          // so we can delete it later\n          songs: [],\n          createdAt: timestamp()\n        });\n        isPending.value = false;\n\n        if (!error.value) {\n          router.push({\n            name: 'PlaylistDetails',\n            params: {\n              id: res.id\n            }\n          });\n        }\n      }\n    }; // allowed file types\n\n\n    const types = ['image/png', 'image/jpeg'];\n\n    const handleChange = e => {\n      let selected = e.target.files[0];\n      console.log(selected);\n\n      if (selected && types.includes(selected.type)) {\n        file.value = selected;\n        fileError.value = null;\n      } else {\n        file.value = null;\n        fileError.value = 'Please select an image file (png or jpg)';\n      }\n    };\n\n    return {\n      title,\n      description,\n      handleSubmit,\n      fileError,\n      handleChange,\n      isPending\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAiBA,SAASA,GAAT,QAAoB,KAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,eAAe;AACbC,OAAK,GAAG;AACN;AACA,UAAM;AAAEC,WAAF;AAASC;AAAT,QAAoBN,aAAa,CAAC,WAAD,CAAvC;AACA,UAAM;AAAEO;AAAF,QAAWN,OAAO,EAAxB;AACA,UAAMO,MAAK,GAAIL,SAAS,EAAxB;AAEA,UAAMM,KAAI,GAAIX,GAAG,CAAC,EAAD,CAAjB;AACA,UAAMY,WAAU,GAAIZ,GAAG,CAAC,EAAD,CAAvB;AACA,UAAMa,IAAG,GAAIb,GAAG,CAAC,IAAD,CAAhB;AACA,UAAMc,SAAQ,GAAId,GAAG,CAAC,IAAD,CAArB;AACA,UAAMe,SAAQ,GAAIf,GAAG,CAAC,KAAD,CAArB;;AAEA,UAAMgB,YAAW,GAAI,YAAY;AAC/B,UAAIH,IAAI,CAACI,KAAT,EAAgB;AACdF,iBAAS,CAACE,KAAV,GAAkB,IAAlB;AACA,cAAMC,WAAW,CAACL,IAAI,CAACI,KAAN,CAAjB;AACA,cAAME,GAAE,GAAI,MAAMX,MAAM,CAAC;AACvBG,eAAK,EAAEA,KAAK,CAACM,KADU;AAEvBL,qBAAW,EAAEA,WAAW,CAACK,KAFF;AAGvBG,gBAAM,EAAEX,IAAI,CAACQ,KAAL,CAAWI,GAHI;AAIvBC,kBAAQ,EAAEb,IAAI,CAACQ,KAAL,CAAWM,WAJE;AAKvBC,kBAAQ,EAAEC,GAAG,CAACR,KALS;AAMvBS,kBAAQ,EAAEA,QAAQ,CAACT,KANI;AAMG;AAC1BU,eAAK,EAAE,EAPgB;AAQvBC,mBAAS,EAAExB,SAAS;AARG,SAAD,CAAxB;AAUAW,iBAAS,CAACE,KAAV,GAAkB,KAAlB;;AACA,YAAI,CAACV,KAAK,CAACU,KAAX,EAAkB;AAChBP,gBAAM,CAACmB,IAAP,CAAY;AAAEC,gBAAI,EAAE,iBAAR;AAA2BC,kBAAM,EAAE;AAAEC,gBAAE,EAAEb,GAAG,CAACa;AAAV;AAAnC,WAAZ;AACF;AACF;AACF,KAnBA,CAZM,CAiCN;;;AACA,UAAMC,KAAI,GAAI,CAAC,WAAD,EAAc,YAAd,CAAd;;AAEA,UAAMC,YAAW,GAAKC,CAAD,IAAO;AAC1B,UAAIC,QAAO,GAAID,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAf;AACAC,aAAO,CAACC,GAAR,CAAYJ,QAAZ;;AAEA,UAAIA,QAAO,IAAKH,KAAK,CAACQ,QAAN,CAAeL,QAAQ,CAACM,IAAxB,CAAhB,EAA+C;AAC7C7B,YAAI,CAACI,KAAL,GAAamB,QAAb;AACAtB,iBAAS,CAACG,KAAV,GAAkB,IAAlB;AACF,OAHA,MAGO;AACLJ,YAAI,CAACI,KAAL,GAAa,IAAb;AACAH,iBAAS,CAACG,KAAV,GAAkB,0CAAlB;AACF;AACF,KAXA;;AAaA,WAAO;AAAEN,WAAF;AAASC,iBAAT;AAAsBI,kBAAtB;AAAoCF,eAApC;AAA+CoB,kBAA/C;AAA6DnB;AAA7D,KAAP;AACF;;AAnDa,CAAf","names":["ref","useStorage","useCollection","getUser","timestamp","useRouter","setup","error","addDoc","user","router","title","description","file","fileError","isPending","handleSubmit","value","uploadImage","res","userId","uid","userName","displayName","coverUrl","url","filePath","songs","createdAt","push","name","params","id","types","handleChange","e","selected","target","files","console","log","includes","type"],"sourceRoot":"","sources":["/home/saumya/Documents/Project.Tech/project-tech/src/views/projectlists/CreateProjectlist.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"handleSubmit\">\n      <h4>Create a New Projectlist</h4>\n      <input type=\"text\" required placeholder=\"Projectlist title\" v-model=\"title\">\n      <textarea required placeholder=\"Projectlist description...\" v-model=\"description\"></textarea>\n      <label>Upload Projectlist Cover Image</label>\n      <input type=\"file\" @change=\"handleChange\">\n      <div class=\"error\">{{ fileError }}</div>\n\n      <button v-if=\"!isPending\">Create</button>\n      <button v-else disabled>Saving...</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport useStorage from '@/composables/useStorage'\nimport useCollection from '@/composables/useCollection'\nimport getUser from '@/composables/getUser'\nimport { timestamp } from '@/firebase/config'\nimport { useRouter } from 'vue-router'\n\nexport default {\n  setup() {\n    // const { filePath, url, uploadImage } = useStorage()\n    const { error, addDoc } = useCollection('playlists')\n    const { user } = getUser()\n    const router = useRouter()\n\n    const title = ref('')\n    const description = ref('')\n    const file = ref(null)\n    const fileError = ref(null)\n    const isPending = ref(false)\n\n    const handleSubmit = async () => {\n      if (file.value) {\n        isPending.value = true\n        await uploadImage(file.value)\n        const res = await addDoc({\n          title: title.value,\n          description: description.value,\n          userId: user.value.uid,\n          userName: user.value.displayName,\n          coverUrl: url.value,\n          filePath: filePath.value, // so we can delete it later\n          songs: [],\n          createdAt: timestamp()\n        })\n        isPending.value = false\n        if (!error.value) {\n          router.push({ name: 'PlaylistDetails', params: { id: res.id }})\n        }\n      }\n    }\n\n    // allowed file types\n    const types = ['image/png', 'image/jpeg']\n\n    const handleChange = (e) => {\n      let selected = e.target.files[0]\n      console.log(selected)\n\n      if (selected && types.includes(selected.type)) {\n        file.value = selected\n        fileError.value = null\n      } else {\n        file.value = null\n        fileError.value = 'Please select an image file (png or jpg)'\n      }\n    }\n    \n    return { title, description, handleSubmit, fileError, handleChange, isPending }\n  }\n}\n</script>\n\n<style>\n  form {\n    background: white;\n  }\n  input[type=\"file\"] {\n    border: 0;\n    padding: 0;\n  }\n  label {\n    font-size: 12px;\n    display: block;\n    margin-top: 30px;\n  }\n  button {\n    margin-top: 20px;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}